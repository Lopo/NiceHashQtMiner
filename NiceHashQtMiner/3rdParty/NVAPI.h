#ifndef NVAPI_H
#define NVAPI_H


namespace NVIDIA {
	namespace NVAPI {

enum class NvStatus {
	OK=0,
	ERROR=-1,
	LIBRARY_NOT_FOUND=-2,
	NO_IMPLEMENTATION=-3,
	API_NOT_INTIALIZED=-4,
	INVALID_ARGUMENT=-5,
	NVIDIA_DEVICE_NOT_FOUND=-6,
	END_ENUMERATION=-7,
	INVALID_HANDLE=-8,
	INCOMPATIBLE_STRUCT_VERSION=-9,
	HANDLE_INVALIDATED=-10,
	OPENGL_CONTEXT_NOT_CURRENT=-11,
	NO_GL_EXPERT=-12,
	INSTRUMENTATION_DISABLED=-13,
	EXPECTED_LOGICAL_GPU_HANDLE=-100,
	EXPECTED_PHYSICAL_GPU_HANDLE=-101,
	EXPECTED_DISPLAY_HANDLE=-102,
	INVALID_COMBINATION=-103,
	NOT_SUPPORTED=-104,
	PORTID_NOT_FOUND=-105,
	EXPECTED_UNATTACHED_DISPLAY_HANDLE=-106,
	INVALID_PERF_LEVEL=-107,
	DEVICE_BUSY=-108,
	NV_PERSIST_FILE_NOT_FOUND=-109,
	PERSIST_DATA_NOT_FOUND=-110,
	EXPECTED_TV_DISPLAY=-111,
	EXPECTED_TV_DISPLAY_ON_DCONNECTOR=-112,
	NO_ACTIVE_SLI_TOPOLOGY=-113,
	SLI_RENDERING_MODE_NOTALLOWED=-114,
	EXPECTED_DIGITAL_FLAT_PANEL=-115,
	ARGUMENT_EXCEED_MAX_SIZE=-116,
	DEVICE_SWITCHING_NOT_ALLOWED=-117,
	TESTING_CLOCKS_NOT_SUPPORTED=-118,
	UNKNOWN_UNDERSCAN_CONFIG=-119,
	TIMEOUT_RECONFIGURING_GPU_TOPO=-120,
	DATA_NOT_FOUND=-121,
	EXPECTED_ANALOG_DISPLAY=-122,
	NO_VIDLINK=-123,
	REQUIRES_REBOOT=-124,
	INVALID_HYBRID_MODE=-125,
	MIXED_TARGET_TYPES=-126,
	SYSWOW64_NOT_SUPPORTED=-127,
	IMPLICIT_SET_GPU_TOPOLOGY_CHANGE_NOT_ALLOWED=-128,
	REQUEST_USER_TO_CLOSE_NON_MIGRATABLE_APPS=-129,
	OUT_OF_MEMORY=-130,
	WAS_STILL_DRAWING=-131,
	FILE_NOT_FOUND=-132,
	TOO_MANY_UNIQUE_STATE_OBJECTS=-133,
	INVALID_CALL=-134,
	D3D10_1_LIBRARY_NOT_FOUND=-135,
	FUNCTION_NOT_FOUND=-136
	};

enum class NvThermalController {
	NONE=0,
	GPU_INTERNAL,
	ADM1032,
	MAX6649,
	MAX1617,
	LM99,
	LM89,
	LM64,
	ADT7473,
	SBMAX6649,
	VBIOSEVT,
	OS,
	UNKNOWN=-1
	};

enum class NvThermalTarget {
	NONE=0,
	GPU=1,
	MEMORY=2,
	POWER_SUPPLY=4,
	BOARD=8,
	ALL=15,
	UNKNOWN=-1
	};

struct NvPhysicalGpuHandle {
	int* ptr;
	};

struct NvPState {
	bool Present;
	int Percentage;
	};

struct NvPStates {
	uint Version;
	uint Flags;
	NvPState PStates[];
	};

struct NvLevel {
	int Level;
	int Policy;
	};

struct NvSensor {
	NvThermalController Controller;
	uint DefaultMinTemp;
	uint DefaultMaxTemp;
	uint CurrentTemp;
	NvThermalTarget Target;
	};

struct NvGPUThermalSettings {
	uint Version;
	uint Count;
	NvSensor Sensor[];
	};

class NVAPI
{
public:
	NVAPI();

	const int MAX_PHYSICAL_GPUS=64;
	static const int MAX_PSTATES_PER_GPU=8;
	const int MAX_COOLER_PER_GPU=20;
	const int MAX_THERMAL_SENSORS_PER_GPU=3;

	static uint32_t GPU_PSTATES_VER=(uint32_t)sizeof(typeof(NvPStates))|0x10000;
//	static uint GPU_THERMAL_SETTINGS_VER=(uint)

	inline static bool IsAvailable() { return available; };

	QFunctionPointer NvAPI_EnumPhysicalGPUs;

private:
	static bool available;
};

	}
}

#endif // NVAPI_H
