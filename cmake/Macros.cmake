macro(SHOW_END_MESSAGE what value)
	string(LENGTH ${what} length_what)
	math(EXPR left_char "20 - ${length_what}")
	set(blanks)
	foreach (_i RANGE 1 ${left_char})
		set(blanks "${blanks} ")
	endforeach (_i)

	message ("  ${what}:${blanks} ${value}")
endmacro(SHOW_END_MESSAGE what value)

macro(SHOW_END_MESSAGE_YESNO what enabled)
	if (${enabled})
		set(enabled_string "yes")
	else (${enabled})
		set(enabled_string "no")
	endif ()

	show_end_message("${what}" "${enabled_string}")
endmacro(SHOW_END_MESSAGE_YESNO what enabled)

macro(dec2hex decin hexout)
	set(dec ${decin})
	if (${dec} EQUAL 0)
		set(${hexout} "0")
	else ()
		set(hex "")
		while (${dec} GREATER 0)
			math(EXPR mod "${dec} % 16")
			if (${mod} EQUAL 15)
				set(hex "F${hex}")
			elseif (${mod} EQUAL 14)
				set(hex "E${hex}")
			elseif (${mod} EQUAL 13)
				set(hex "D${hex}")
			elseif (${mod} EQUAL 12)
				set(hex "C${hex}")
			elseif (${mod} EQUAL 11)
				set(hex "B${hex}")
			elseif (${mod} EQUAL 10)
				set(hex "A${hex}")
			else ()
				set(hex "${mod}${hex}")
			endif ()
			math(EXPR dec "${dec} / 16")
		endwhile ()
		set(${hexout} ${hex})
	endif ()
endmacro()

macro(get_WIN32_WINNT version)
	if (WIN32 AND CMAKE_SYSTEM_VERSION)
		set(ver ${CMAKE_SYSTEM_VERSION})
		string(REGEX REPLACE "^([0-9]+)[.]([0-9]+).*" "\\1" sys_ver_maj "${ver}")
		string(REGEX REPLACE "^([0-9]+)[.]([0-9]+).*" "\\2" sys_ver_min "${ver}")
		dec2hex(${sys_ver_maj} hex_maj)
		dec2hex(${sys_ver_min} hex_min)
		string(LENGTH ${hex_maj} len_maj)
		string(LENGTH ${hex_min} len_min)
		if (len_maj EQUAL 1)
			set(vmaj "0${hex_maj}")
		else ()
			set(vmaj "${hex_maj}")
		endif ()
		if (len_min EQUAL 1)
			set(vmin "0${hex_min}")
		else ()
			set(vmin "${hex_min}")
		endif ()

		set(${version} "0x${vmaj}${vmin}")
	endif ()
endmacro()
